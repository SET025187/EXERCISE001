![image-20240331173555809](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240331173555809.png)

![image-20240331173613633](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240331173613633.png)

```
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int N = 2e5 + 9;

int a[N],c[N];

void solve()
{
	int n;cin>>n;
	for(int i=1;i<=n;++i)cin>>a[i];
	

	//for(int i=1;i<=n;++i)c[a[i]]=0;
	
	memset(c,0,sizeof(int)*(n+1));
	
	ll ans=0;
	for(int i=1,j=0;i<=n;++i)
	{
		while(j<n&&!c[a[j+1]])c[a[++j]]++;
		
		ans=max(ans,j-i+1ll);
		c[a[i]]--;
	}
	
	cout<<ans<<'\n';

}

int main()
{
	ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
	

	int _;cin>>_;
	
	while(_--)solve();
	
	return 0;

}


```



在给定的代码中，`while(j < n && !c[a[j+1]]) c[a[++j]]++;` 的含义是：

1. `j` 是一个指针，初始值为0。
2. 循环条件 `j < n && !c[a[j+1]]` 检查当前指针 `j` 是否小于 `n` 且 `c[a[j+1]]` 是否为0，即数组 `c` 中下标为 `a[j+1]` 的元素是否为0。
3. 如果循环条件满足，进入循环体。
4. `c[a[++j]]++` 的作用是将数组 `c` 中下标为 `a[j+1]` 的元素加1，并将指针 `j` 向后移动一位。
5. 当循环条件不满足时，退出循环。

该循环的目的是寻找数组 `a` 中从位置 `i` 到位置 `j`（其中 `i <= j`）之间的不重复元素的最长连续子序列的长度。循环体内的操作可以理解为扩展右边界 `j`，使得子序列中的元素不重复。

具体的执行过程如下：
- 初始化指针 `j` 为0，表示当前子序列的右边界为0。
- 通过 `while` 循环，不断向右移动右边界 `j`，直到遇到重复的元素或者到达数组末尾。
- 在每次循环迭代中，判断 `c[a[j+1]]` 是否为0，即当前右边界的元素是否已经在子序列中出现过。如果重复则退出循环，否则将对应的计数器 `c[a[j+1]]` 加1，并将右边界指针 `j` 向右移动一位。
- 计算当前子序列的长度 `j - i + 1`，并更新最长子序列的长度 `ans`。
- 将左边界的元素从子序列中移除，即将对应的计数器 `c[a[i]]` 减1，然后将左边界指针 `i` 向右移动一位。
- 重复上述步骤，直到遍历完整个数组。

最终，输出变量 `ans` 的值，即为数组 `a` 中的最长不重复连续子序列的长度。

希望能解答您的疑问。如果还有其他问题，请随时提问。