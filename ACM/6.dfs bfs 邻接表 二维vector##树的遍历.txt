![image-20240406080518649](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406080518649.png)

![image-20240406081354907](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406081354907.png)

![image-20240406081358036](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406081358036.png)

![](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406081400606.png)![image-20240406081405027](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406081405027.png)

![image-20240406081351441](C:\Users\set\AppData\Roaming\Typora\typora-user-images\image-20240406081351441.png)

```
#include <bits/stdc++.h>
using namespace std;

const int N = 60;

int  fa[N];//father

vector<int> g[N];//graph

void dfs(int x)
{
	cout<<x<<' ';
	for(auto &y:g[x])dfs(y);
}

void bfs(int st)
{
	queue<int> q;
	q.push(st);
	while(q.size())
	{
		int x =q.front();q.pop();
		cout<<x<<' ';
		for(auto &y:g[x])q.push(y);
	}
}

int main()
{
	int n;cin>>n;
	for(int i=2;i<=n;++i)cin>>fa[i];
	for(int i=2;i<=n;++i)g[fa[i]].push_back(i);
	
	for(int i=2;i<=n;++i)sort(g[i].begin(),g[i].end());
	
	dfs(1);
	cout<<'\n';
	bfs(1);
	
	return 0;
}
```

$$
根据给定的样例输入和样例输出，我们来详细介绍代码的执行过程。

首先，输入的样例输入是：
```
4
1 1 2
```
其中，`4` 表示节点的数量，`1 1 2` 表示每个节点的父节点信息。

根据父节点信息，构建树的邻接表 `g`，得到如下的邻接表表示：
```
g[1]: 2, 3
g[2]: 4
g[3]: 
g[4]:
```
根据代码中的排序操作，对每个节点的邻接表 `g[i]` 进行排序，得到：
```
g[1]: 2, 3
g[2]: 4
g[3]: 
g[4]:
```

接下来，调用 `dfs(1)` 函数进行深度优先搜索。初始时，将参数 `x` 设为 `1`，表示从根节点开始遍历。

在 `dfs` 函数中，首先输出当前节点 `x`，即输出 `1`。然后递归调用 `dfs` 函数遍历当前节点的所有子节点。

对于节点 `1`，它的子节点是 `2` 和 `3`。
- 对节点 `2` 调用 `dfs` 函数，输出 `2`，然后递归调用 `dfs` 函数遍历节点 `2` 的子节点。节点 `2` 的子节点是 `4`。
  - 对节点 `4` 调用 `dfs` 函数，输出 `4`，然后递归调用 `dfs` 函数遍历节点 `4` 的子节点。节点 `4` 没有子节点，结束递归。
- 对节点 `3` 调用 `dfs` 函数，输出 `3`，然后递归调用 `dfs` 函数遍历节点 `3` 的子节点。节点 `3` 没有子节点，结束递归。

因此，深度优先搜索的输出结果为 `1 2 4 3`。

接下来，调用 `bfs(1)` 函数进行广度优先搜索。初始时，将起始节点 `st` 设为 `1`，表示从根节点开始遍历。

在 `bfs` 函数中，使用队列 `q` 存储待遍历的节点。初始时，将节点 `1` 入队。

进入循环，当队列不为空时进行遍历。首先，取出队首元素 `x`，即取出 `1`，然后输出节点 `x`，即输出 `1`。

接下来，将节点 `1` 的子节点 `2` 和 `3` 分别入队，此时队列中的元素为 `2, 3`。

继续循环，取出队首元素 `x`，即取出 `2`，然后输出节点 `x`，即输出 `2`。

节点 `2` 没有子节点，所以不需要将任何节点入队。

继续循环，取出队首元素 `x`，即取出 `3`，然后输出节点 `x`，即输出 `3`。

节点 `3` 没有子节点，所以不需要将任何节点入队。

最后，队列为空，循环结束。

因此，广度优先搜索的输出结果为 `1 2 3 4`。

综上所述，给定样例输入 `4\n1 1 2`，对应的深度优先搜索和广度优先搜索的输出结果分别为 `1 2 4 3` 和 `1 2 3 4`。
$$

